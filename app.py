import streamlit as st
import os
import openai
import pandas as pd
from datetime import datetime
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import re


# Set page config
st.set_page_config(
    page_title="Alligator.tour - Travel Assistant",
    page_icon="üß≥",
    layout="wide"
)

# Custom CSS (unchanged)
st.markdown("""
<style>
/* Make the sidebar background white */
[data-testid="stSidebar"] {
    background-color: white;
}

/* Optional: Adjust text colors for better contrast on white background */
[data-testid="stSidebar"] .stMarkdown {
    color: #333333;
}

/* Make sure dropdown menus have good contrast */
[data-testid="stSidebar"] .stSelectbox label {
    color: #333333;
}
</style>
""", unsafe_allow_html=True)

# Initialize OpenAI API
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Language support
SUPPORTED_LANGUAGES = {
    "en": "English",
    "de": "German",
    "uk": "Ukrainian",
    "ru": "Russian",
    "ro": "Romanian"
}

# Translations for UI elements
UI_TRANSLATIONS = {
    "en": {
        "title": "Talk to your Travel Assistant üåé",
        "subtitle": "Ask me about destinations, travel tips, or help planning your next adventure!",
        "input_placeholder": "Type your travel question here...",
        "sidebar_title": "Your Ultimate Travel Companion",
        "popular_destinations": "Popular Destinations",
        "welcome_message": """üëã Hello! I'm your Alligator.tour travel assistant!

I'm here to help you plan an amazing vacation experience. 

‚ú® Where are you thinking of traveling to? Or if you're not sure yet, I'd be happy to suggest some fantastic destinations based on your interests!"""
    },
    "de": {
        "title": "Sprich mit deinem Reiseassistenten üåé",
        "subtitle": "Frag mich nach Reisezielen, Reisetipps oder Hilfe bei der Planung deines n√§chsten Abenteuers!",
        "input_placeholder": "Gib deine Reisefrage hier ein...",
        "sidebar_title": "Dein ultimativer Reisebegleiter",
        "popular_destinations": "Beliebte Reiseziele",
        "welcome_message": """üëã Hallo! Ich bin dein Alligator.tour Reiseassistent!

Ich bin hier, um dir bei der Planung eines tollen Urlaubserlebnisses zu helfen.

‚ú® Wohin m√∂chtest du reisen? Oder wenn du dir noch nicht sicher bist, kann ich dir gerne einige fantastische Reiseziele basierend auf deinen Interessen vorschlagen!"""
    },
    "uk": {
        "title": "–ü–æ–≥–æ–≤–æ—Ä—ñ—Ç—å –∑—ñ —Å–≤–æ—ó–º —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏–º –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º üåé",
        "subtitle": "–ó–∞–ø–∏—Ç–∞–π—Ç–µ –º–µ–Ω–µ –ø—Ä–æ –Ω–∞–ø—Ä—è–º–∫–∏, –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø–æ–¥–æ—Ä–æ–∂–µ–π –∞–±–æ –¥–æ–ø–æ–º–æ–≥—É —É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –≤–∞—à–æ—ó –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø—Ä–∏–≥–æ–¥–∏!",
        "input_placeholder": "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥–æ—Ä–æ–∂ —Ç—É—Ç...",
        "sidebar_title": "–í–∞—à —ñ–¥–µ–∞–ª—å–Ω–∏–π –∫–æ–º–ø–∞–Ω—å–π–æ–Ω –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π",
        "popular_destinations": "–ü–æ–ø—É–ª—è—Ä–Ω—ñ –Ω–∞–ø—Ä—è–º–∫–∏",
        "welcome_message": """üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç Alligator.tour!

–Ø —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —á—É–¥–æ–≤—É –≤—ñ–¥–ø—É—Å—Ç–∫—É.

‚ú® –ö—É–¥–∏ –≤–∏ –¥—É–º–∞—î—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏? –ê–±–æ —è–∫—â–æ –≤–∏ —â–µ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —è –º–æ–∂—É –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω—ñ –Ω–∞–ø—Ä—è–º–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤!"""
    },
    "ru": {
        "title": "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å–æ —Å–≤–æ–∏–º —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º üåé",
        "subtitle": "–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö, —Å–æ–≤–µ—Ç–∞—Ö –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –∏–ª–∏ –ø–æ–º–æ—â–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!",
        "input_placeholder": "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∑–¥–µ—Å—å...",
        "sidebar_title": "–í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
        "popular_destinations": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "welcome_message": """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Alligator.tour!

–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ø—É—Å–∫.

‚ú® –ö—É–¥–∞ –≤—ã –¥—É–º–∞–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å? –ò–ª–∏ –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!"""
    },
    "ro": {
        "title": "Vorbe»ôte cu asistentul tƒÉu de cƒÉlƒÉtorie üåé",
        "subtitle": "√éntreabƒÉ-mƒÉ despre destina»õii, sfaturi de cƒÉlƒÉtorie sau ajutor pentru planificarea urmƒÉtoarei tale aventuri!",
        "input_placeholder": "TasteazƒÉ √Æntrebarea ta despre cƒÉlƒÉtorie aici...",
        "sidebar_title": "Companionul tƒÉu ultim de cƒÉlƒÉtorie",
        "popular_destinations": "Destina»õii populare",
        "welcome_message": """üëã Salut! Sunt asistentul tƒÉu de cƒÉlƒÉtorie Alligator.tour!

Sunt aici pentru a te ajuta sƒÉ planifici o experien»õƒÉ de vacan»õƒÉ uimitoare.

‚ú® Unde te g√¢nde»ôti sƒÉ cƒÉlƒÉtore»ôti? Sau dacƒÉ nu e»ôti √ÆncƒÉ sigur, a»ô fi bucuros sƒÉ √Æ»õi sugerez c√¢teva destina»õii fantastice bazate pe interesele tale!"""
    }
}

# Initialize session state
if 'messages' not in st.session_state:
    st.session_state.messages = []

if 'user_info' not in st.session_state:
    st.session_state.user_info = {
        "name": "Not provided",  # Set a default value
        "contact": None,
        "destination": "Not specified",  # Set a default value
        "travel_dates": None,
        "interests": [],
        "budget": None,
        "language": "en"  # Default language is English
    }

if 'contact_requested' not in st.session_state:
    st.session_state.contact_requested = False

if 'contact_saved' not in st.session_state:
    st.session_state.contact_saved = False

# Initialize with welcome message if no messages exist
if len(st.session_state.messages) == 0:
    lang = st.session_state.user_info["language"]
    st.session_state.messages.append(
        {"role": "assistant", "content": UI_TRANSLATIONS[lang]["welcome_message"]}
    )

# Language detection
def detect_language(text):
    """Detect the language of the input text using OpenAI"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a language detector. Output only a two-letter language code from this list: en, de, uk, ru, ro."},
                {"role": "user", "content": f"Detect the language of this text and respond with only the language code: {text}"}
            ],
            temperature=0.1,
            max_tokens=10
        )
        detected_lang = response.choices[0].message["content"].strip().lower()
        
        # Make sure we have a supported language
        if detected_lang in SUPPORTED_LANGUAGES:
            return detected_lang
        return "en"  # Default to English if detection fails
    except Exception as e:
        print(f"Error detecting language: {e}")
        return "en"  # Default to English on error

# Email extraction using regex
def extract_email(message):
    # More permissive email pattern that should work with any character set
    email_pattern = r'[^\s@]+@[^\s@]+\.[^\s@]+'
    email_match = re.search(email_pattern, message)
    if email_match:
        email = email_match.group(0).strip(',.!?;:()')
        print(f"Found email with permissive pattern: {email}")
        return email
    return None

# Helper function to extract travel information from messages
def extract_travel_info(message):
    message_lower = message.lower()
    print(f"Extracting info from: {message}")
    
    # Extract destination
    countries = extract_countries(message)
    if countries:
        st.session_state.user_info["destination"] = countries[0].capitalize()
        print(f"Set destination to: {countries[0].capitalize()}")
    
    # Extract contact info - be more aggressive
    # First check if it looks like just a phone number by itself
    if not st.session_state.user_info["contact"] and message.strip().isdigit() and len(message.strip()) >= 6:
        st.session_state.user_info["contact"] = message.strip()
        print(f"Found raw phone number: {message.strip()}")
        success = save_contact_to_sheet()
        print(f"Save contact success: {success}")
    else:
        # Try to extract email
        email = extract_email(message)
        if email and not st.session_state.user_info["contact"]:
            st.session_state.user_info["contact"] = email
            print(f"Found email: {email}")
            success = save_contact_to_sheet()
            print(f"Save contact success: {success}")
        else:
            # Try to extract phone with better pattern matching
            phone = extract_phone(message)
            if phone and not st.session_state.user_info["contact"]:
                st.session_state.user_info["contact"] = phone
                print(f"Found phone: {phone}")
                success = save_contact_to_sheet()
                print(f"Save contact success: {success}")
    
    print(f"Updated user_info: {st.session_state.user_info}")

# Improved destinations extraction
def extract_countries(message):
    message_lower = message.lower()
    print(f"Checking for destinations in: {message_lower}")
    
    # Add more destinations
    common_destinations = [
        "france", "frankreich", "—Ñ—Ä–∞–Ω—Ü—ñ—è", "—Ñ—Ä–∞–Ω—Ü–∏—è", "fran»õa",
        "italy", "italien", "—ñ—Ç–∞–ª—ñ—è", "–∏—Ç–∞–ª–∏—è", "italia",
        "spain", "spanien", "—ñ—Å–ø–∞–Ω—ñ—è", "–∏—Å–ø–∞–Ω–∏—è", "spania",
        "greece", "griechenland", "–≥—Ä–µ—Ü—ñ—è", "–≥—Ä–µ—Ü–∏—è", "grecia",
        "japan", "japan", "—è–ø–æ–Ω—ñ—è", "—è–ø–æ–Ω–∏—è", "japonia",
        "thailand", "thailand", "—Ç–∞—ó–ª–∞–Ω–¥", "—Ç–∞–∏–ª–∞–Ω–¥", "tailanda",
        "australia", "australien", "–∞–≤—Å—Ç—Ä–∞–ª—ñ—è", "–∞–≤—Å—Ç—Ä–∞–ª–∏—è", "australia",
        "canada", "kanada", "–∫–∞–Ω–∞–¥–∞", "–∫–∞–Ω–∞–¥–∞", "canada",
        "mexico", "mexiko", "–º–µ–∫—Å–∏–∫–∞", "–º–µ–∫—Å–∏–∫–∞", "mexic",
        "brazil", "brasilien", "–±—Ä–∞–∑–∏–ª—ñ—è", "–±—Ä–∞–∑–∏–ª–∏—è", "brazilia",
        "egypt", "√§gypten", "—î–≥–∏–ø–µ—Ç", "–µ–≥–∏–ø–µ—Ç", "egipt",
        "turkey", "t√ºrkei", "—Ç—É—Ä–µ—á—á–∏–Ω–∞", "—Ç—É—Ä—Ü–∏—è", "turcia",
        "germany", "deutschland", "–Ω—ñ–º–µ—á—á–∏–Ω–∞", "–≥–µ—Ä–º–∞–Ω–∏—è", "germania",
        "uk", "gro√übritannien", "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è", "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "marea britanie",
        "ireland", "irland", "—ñ—Ä–ª–∞–Ω–¥—ñ—è", "–∏—Ä–ª–∞–Ω–¥–∏—è", "irlanda",
        "china", "china", "–∫–∏—Ç–∞–π", "–∫–∏—Ç–∞–π", "china",
        "india", "indien", "—ñ–Ω–¥—ñ—è", "–∏–Ω–¥–∏—è", "india",
        "morocco", "marokko", "–º–∞—Ä–æ–∫–∫–æ", "–º–∞—Ä–æ–∫–∫–æ", "maroc",
        "south africa", "s√ºdafrika", "–ø—ñ–≤–¥–µ–Ω–Ω–∞ –∞—Ñ—Ä–∏–∫–∞", "—é–∂–Ω–∞—è –∞—Ñ—Ä–∏–∫–∞", "africa de sud",
        "peru", "peru", "–ø–µ—Ä—É", "–ø–µ—Ä—É", "peru",
        "argentina", "argentinien", "–∞—Ä–≥–µ–Ω—Ç–∏–Ω–∞", "–∞—Ä–≥–µ–Ω—Ç–∏–Ω–∞", "argentina",
        "chile", "chile", "—á–∏–ª—ñ", "—á–∏–ª–∏", "chile",
        "vietnam", "vietnam", "–≤'—î—Ç–Ω–∞–º", "–≤—å–µ—Ç–Ω–∞–º", "vietnam",
        "cambodia", "kambodscha", "–∫–∞–º–±–æ–¥–∂–∞", "–∫–∞–º–±–æ–¥–∂–∞", "cambodgia",
        "singapore", "singapur", "—Å—ñ–Ω–≥–∞–ø—É—Ä", "—Å–∏–Ω–≥–∞–ø—É—Ä", "singapore",
        "indonesia", "indonesien", "—ñ–Ω–¥–æ–Ω–µ–∑—ñ—è", "–∏–Ω–¥–æ–Ω–µ–∑–∏—è", "indonezia",
        "bali", "bali", "–±–∞–ª—ñ", "–±–∞–ª–∏", "bali",
        "iceland", "island", "—ñ—Å–ª–∞–Ω–¥—ñ—è", "–∏—Å–ª–∞–Ω–¥–∏—è", "islanda",
        "sweden", "schweden", "—à–≤–µ—Ü—ñ—è", "—à–≤–µ—Ü–∏—è", "suedia",
        "norway", "norwegen", "–Ω–æ—Ä–≤–µ–≥—ñ—è", "–Ω–æ—Ä–≤–µ–≥–∏—è", "norvegia",
        "denmark", "d√§nemark", "–¥–∞–Ω—ñ—è", "–¥–∞–Ω–∏—è", "danemarca",
        "netherlands", "niederlande", "–Ω—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏", "–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "»õƒÉrile de jos",
        "portugal", "portugal", "–ø–æ—Ä—Ç—É–≥–∞–ª—ñ—è", "–ø–æ—Ä—Ç—É–≥–∞–ª–∏—è", "portugalia",
        "croatia", "kroatien", "—Ö–æ—Ä–≤–∞—Ç—ñ—è", "—Ö–æ—Ä–≤–∞—Ç–∏—è", "croa»õia",
        "switzerland", "schweiz", "—à–≤–µ–π—Ü–∞—Ä—ñ—è", "—à–≤–µ–π—Ü–∞—Ä–∏—è", "elve»õia",
        "austria", "√∂sterreich", "–∞–≤—Å—Ç—Ä—ñ—è", "–∞–≤—Å—Ç—Ä–∏—è", "austria",
        "new zealand", "neuseeland", "–Ω–æ–≤–∞ –∑–µ–ª–∞–Ω–¥—ñ—è", "–Ω–æ–≤–∞—è –∑–µ–ª–∞–Ω–¥–∏—è", "noua zeelandƒÉ",
        "fiji", "fidschi", "—Ñ—ñ–¥–∂—ñ", "—Ñ–∏–¥–∂–∏", "fiji",
        "costa rica", "costa rica", "–∫–æ—Å—Ç–∞-—Ä—ñ–∫–∞", "–∫–æ—Å—Ç–∞-—Ä–∏–∫–∞", "costa rica",
        "usa", "usa", "—Å—à–∞", "—Å—à–∞", "sua",
        "united states", "vereinigte staaten", "—Å–ø–æ–ª—É—á–µ–Ω—ñ —à—Ç–∞—Ç–∏", "—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —à—Ç–∞—Ç—ã", "statele unite",
        "ukraine", "ukraine", "—É–∫—Ä–∞—ó–Ω–∞", "—É–∫—Ä–∞–∏–Ω–∞", "ucraina",
        "dnipro", "dnipro", "–¥–Ω—ñ–ø—Ä–æ", "–¥–Ω–µ–ø—Ä", "nipru",
        "kyiv", "kiew", "–∫–∏—ó–≤", "–∫–∏–µ–≤", "kiev",
        "odessa", "odessa", "–æ–¥–µ—Å–∞", "–æ–¥–µ—Å—Å–∞", "odesa",
        "lviv", "lemberg", "–ª—å–≤—ñ–≤", "–ª—å–≤–æ–≤", "liov",
        # Add specific cities
        "rome", "rom", "—Ä–∏–º", "—Ä–∏–º", "roma",
        "paris", "paris", "–ø–∞—Ä–∏–∂", "–ø–∞—Ä–∏–∂", "paris",
        "london", "london", "–ª–æ–Ω–¥–æ–Ω", "–ª–æ–Ω–¥–æ–Ω", "londra",
        "tokyo", "tokio", "—Ç–æ–∫—ñ–æ", "—Ç–æ–∫–∏–æ", "tokyo",
        "barcelona", "barcelona", "–±–∞—Ä—Å–µ–ª–æ–Ω–∞", "–±–∞—Ä—Å–µ–ª–æ–Ω–∞", "barcelona",
        "new york", "new york", "–Ω—å—é-–π–æ—Ä–∫", "–Ω—å—é-–π–æ—Ä–∫", "new york",
        "los angeles", "los angeles", "–ª–æ—Å-–∞–Ω–¥–∂–µ–ª–µ—Å", "–ª–æ—Å-–∞–Ω–¥–∂–µ–ª–µ—Å", "los angeles"
    ]
    
    found_destinations = []
    for destination in common_destinations:
        if destination in message_lower:
            found_destinations.append(destination)
            print(f"Matched destination: {destination}")
    
    # If not found directly, check if the user's message looks like just a destination
    if not found_destinations and len(message.split()) <= 2:
        # Check if it's a proper noun (capitalized word)
        words = message.split()
        for word in words:
            cleaned_word = word.strip(',.:;!?')
            if cleaned_word and cleaned_word[0].isupper() and len(cleaned_word) > 3:
                found_destinations.append(cleaned_word.lower())
                print(f"Found potential destination from capitalized word: {cleaned_word}")
                break
            
    return found_destinations

# Improved phone extraction
def extract_phone(message):
    # First try to find formatted phone numbers
    phone_pattern = r'(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{3}\)?[-.\s]?)?\d{3}[-.\s]?\d{4}'
    phone_match = re.search(phone_pattern, message)
    if phone_match:
        return phone_match.group(0)
    
    # Look for any sequence of digits
    digits_only = ''.join(c for c in message if c.isdigit())
    if len(digits_only) >= 6:  # More permissive - any 6+ digit sequence
        return digits_only
    
    return None

def save_contact_to_sheet():
    """Function to save contact details to Google Sheets using Streamlit secrets"""
    if not st.session_state.user_info["contact"]:
        print("No contact to save")
        return False
    
    try:
        # Ensure we have values for all fields
        destination = st.session_state.user_info.get("destination")
        if not destination or destination == "None":
            # Logic to find destination from chat history (keep your existing code)
            pass
        
        # Prepare data to save
        data = {
            "name": st.session_state.user_info.get("name") or "Not provided",
            "contact": st.session_state.user_info["contact"],
            "destination": destination or "Not specified",
            "interests": ", ".join(st.session_state.user_info.get("interests", [])) or "Not specified",
            "budget": st.session_state.user_info.get("budget") or "Not specified",
            "language": st.session_state.user_info.get("language") or "en",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        print(f"Data to save: {data}")
        
        # Use Google Sheets with credentials from Streamlit secrets
        import json
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        
        # Parse the JSON string from secrets
        google_creds_json = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
        credentials = ServiceAccountCredentials.from_service_account_info(google_creds_json, scope)
        client = gspread.authorize(credentials)
        
        # Get spreadsheet ID from URL (you can also store this in secrets)
        sheet_url = "https://docs.google.com/spreadsheets/d/1u0oWbOWXJaPwKfBXBrebc67s0PAz1tgCh7Og_Neaofk/edit?gid=0#gid=0"
        sheet_id = st.secrets.get("SHEET_ID", "1u0oWbOWXJaPwKfBXBrebc67s0PAz1tgCh7Og_Neaofk")
        
        # Open sheet and add row
        sheet = client.open_by_key(sheet_id).sheet1
        
        # Add the row with all data
        row_data = [
            data["name"],
            data["contact"],
            data["destination"],
            data["interests"],
            data["budget"],
            data["language"],
            data["timestamp"]
        ]
        
        print(f"Row data: {row_data}")
        sheet.append_row(row_data)
        print(f"Successfully saved contact data to Google Sheet")
        
        st.session_state.contact_saved = True
        return True
        
    except Exception as e:
        print(f"Error saving to Google Sheet: {e}")
        # More detailed error trace
        import traceback
        print(traceback.format_exc())
        
        # Try CSV fallback if needed
        try:
            fallback_file = "contact_leads.csv"
            import csv
            file_exists = os.path.exists(fallback_file)
            with open(fallback_file, 'a', newline='') as f:
                writer = csv.writer(f)
                if not file_exists:
                    writer.writerow(["Name", "Contact", "Destination", "Interests", "Budget", "Language", "Timestamp"])
                writer.writerow([
                    data["name"],
                    data["contact"],
                    data["destination"],
                    data["interests"],
                    data["budget"],
                    data["language"],
                    data["timestamp"]
                ])
            print(f"Saved to local CSV file: {fallback_file}")
        except Exception as csv_err:
            print(f"Error saving to CSV: {str(csv_err)}")
        return False

def should_request_contact():
    # Check if we've collected enough info and should ask for contact
    if st.session_state.contact_requested or st.session_state.contact_saved:
        return False
    
    # Always request contact after a few messages, even if no destination yet
    # This ensures we always collect contact info
    if len(st.session_state.messages) >= 2 and not st.session_state.user_info["contact"]:
        print("Setting contact_requested to True")
        st.session_state.contact_requested = True
        return True
    
    return False

def get_system_message():
    # Get the user's current language
    lang = st.session_state.user_info.get("language") or "en"
    
    # Base message localized based on language
    if lang == "en":
        base_message = """You are a friendly and knowledgeable travel agent for Alligator.tour travel agency. 
        Your goal is to help users plan their perfect international trip.
        
        IMPORTANT GUIDELINES:
        
        1. ALWAYS ask targeted questions to understand their needs. For example: "Are you looking for relaxation, adventure, culture, or family fun?"
        
        2. After they mention a destination or show interest, OFFER HELP OPTIONS using this format:
           
           "I'd be happy to help you with your [DESTINATION] trip! What would you like to know about? 
           
           üó∫Ô∏è Recommended itinerary
           üß≥ Packing tips and important documents
           üè® Accommodation suggestions
           üçΩÔ∏è Local cuisine recommendations
           üö∂ Must-see attractions and activities
           üí° Local customs and travel tips
           üí∞ Budget advice and money-saving tips"
        
        3. Use plenty of relevant emojis throughout your responses
        
        4. Break up your text into small, digestible paragraphs (2-3 sentences maximum)
        
        5. When providing information, use subheadings and bullet points to organize it
        
        6. Be enthusiastic and conversational
        
        7. ALWAYS ask follow-up questions to better understand their needs at the end of your responses
        
        8. When appropriate, subtly encourage booking through Alligator.tour
        
        9. VERY IMPORTANT: At the end of your responses (especially after providing substantive travel information), ask for the user's contact information like this:
        
           "Would you like a travel specialist to contact you with personalized recommendations for [DESTINATION]? If so, please share your email or phone number."
           
        IMPORTANT: The user is speaking in English. You must respond in English.
        """
    elif lang == "de":
        base_message = """Du bist ein freundlicher und kenntnisreicher Reiseberater f√ºr die Alligator.tour Reiseagentur.
        Dein Ziel ist es, Benutzern bei der Planung ihrer perfekten internationalen Reise zu helfen.
        
        WICHTIGE RICHTLINIEN:
        
        1. Stelle IMMER gezielte Fragen, um ihre Bed√ºrfnisse zu verstehen. Zum Beispiel: "Suchst du nach Entspannung, Abenteuer, Kultur oder Familienspa√ü?"
        
        2. Nachdem sie ein Reiseziel erw√§hnt haben oder Interesse zeigen, BIETE HILFEOPTIONEN in diesem Format an:
           
           "Ich helfe dir gerne bei deiner Reise nach [REISEZIEL]! Was m√∂chtest du wissen √ºber?
           
           üó∫Ô∏è Empfohlene Reiseroute
           üß≥ Packtipps und wichtige Dokumente
           üè® Unterkunftsvorschl√§ge
           üçΩÔ∏è Empfehlungen f√ºr lokale K√ºche
           üö∂ Sehensw√ºrdigkeiten und Aktivit√§ten
           üí° Lokale Br√§uche und Reisetipps
           üí∞ Budgetberatung und Geldsparen"
        
        3. Verwende viele relevante Emojis in deinen Antworten
        
        4. Teile deinen Text in kleine, verdauliche Abs√§tze auf (maximal 2-3 S√§tze)
        
        5. Bei der Bereitstellung von Informationen, verwende Unter√ºberschriften und Aufz√§hlungspunkte
        
        6. Sei begeistert und gespr√§chig
        
        7. Stelle IMMER Folgefragen, um ihre Bed√ºrfnisse am Ende deiner Antworten besser zu verstehen
        
        8. Wenn es angebracht ist, ermuntere sie subtil, √ºber Alligator.tour zu buchen
        
        9. SEHR WICHTIG: Am Ende deiner Antworten (besonders nach substantiellen Reiseinformationen), frage nach den Kontaktinformationen des Benutzers wie folgt:
        
           "M√∂chtest du, dass ein Reisespezialist dich mit personalisierten Empfehlungen f√ºr [REISEZIEL] kontaktiert? Wenn ja, teile bitte deine E-Mail-Adresse oder Telefonnummer mit."
           
        WICHTIG: Der Benutzer spricht Deutsch. Du musst auf Deutsch antworten.
        """
    elif lang == "uk":
        base_message = """–í–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–∏–π —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏–π –∞–≥–µ–Ω—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ Alligator.tour.
        –í–∞—à–∞ –º–µ—Ç–∞ - –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —ó—Ö–Ω—é —ñ–¥–µ–∞–ª—å–Ω—É –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—É –ø–æ–¥–æ—Ä–æ–∂.
        
        –í–ê–ñ–õ–ò–í–Ü –í–ö–ê–ó–Ü–í–ö–ò:
        
        1. –ó–ê–í–ñ–î–ò –∑–∞–¥–∞–≤–∞–π—Ç–µ —Ü—ñ–ª—å–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —ó—Ö–Ω—ñ –ø–æ—Ç—Ä–µ–±–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–í–∏ —à—É–∫–∞—î—Ç–µ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫, –ø—Ä–∏–≥–æ–¥–∏, –∫—É–ª—å—Ç—É—Ä—É —á–∏ —Å—ñ–º–µ–π–Ω—ñ —Ä–æ–∑–≤–∞–≥–∏?"
        
        2. –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–æ–Ω–∏ –∑–≥–∞–¥–∞—é—Ç—å –ø—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ—è–≤–ª—è—Ç—å —ñ–Ω—Ç–µ—Ä–µ—Å, –ó–ê–ü–†–û–ü–û–ù–£–ô–¢–ï –í–ê–†–Ü–ê–ù–¢–ò –î–û–ü–û–ú–û–ì–ò —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:
           
           "–Ø –∑ —Ä–∞–¥—ñ—Å—Ç—é –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —ñ–∑ –ø–æ—ó–∑–¥–∫–æ—é –¥–æ [–ü–£–ù–ö–¢ –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø]! –©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ?
           
           üó∫Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
           üß≥ –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø–∞–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∞–∂–ª–∏–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
           üè® –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∂–∏—Ç–ª–∞
           üçΩÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –º—ñ—Å—Ü–µ–≤–æ—ó –∫—É—Ö–Ω—ñ
           üö∂ –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞–º'—è—Ç–∫–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥–∏
           üí° –ú—ñ—Å—Ü–µ–≤—ñ –∑–≤–∏—á–∞—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π
           üí∞ –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ –±—é–¥–∂–µ—Ç—É —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ—ó –≥—Ä–æ—à–µ–π"
        
        3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±–∞–≥–∞—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –µ–º–æ–¥–∑—ñ —É —Å–≤–æ—ó—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö
        
        4. –†–æ–∑–±–∏–≤–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ–≤–µ–ª–∏–∫—ñ, –ª–µ–≥–∫–æ–∑–∞—Å–≤–æ—é–≤–∞–Ω—ñ –∞–±–∑–∞—Ü–∏ (–º–∞–∫—Å–∏–º—É–º 2-3 —Ä–µ—á–µ–Ω–Ω—è)
        
        5. –ü—Ä–∏ –Ω–∞–¥–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –º–∞—Ä–∫–µ—Ä–∏
        
        6. –ë—É–¥—å—Ç–µ –µ–Ω—Ç—É–∑—ñ–∞–∑–Ω–∏–º–∏ —Ç–∞ –∫–æ–º—É–Ω—ñ–∫–∞–±–µ–ª—å–Ω–∏–º–∏
        
        7. –ó–ê–í–ñ–î–ò —Å—Ç–∞–≤—Ç–µ —É—Ç–æ—á–Ω—é—é—á—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —ó—Ö–Ω—ñ –ø–æ—Ç—Ä–µ–±–∏ –≤ –∫—ñ–Ω—Ü—ñ –≤–∞—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        
        8. –ö–æ–ª–∏ –¥–æ—Ä–µ—á–Ω–æ, —Ç–æ–Ω–∫–æ –∑–∞–æ—Ö–æ—á—É–π—Ç–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Alligator.tour
        
        9. –î–£–ñ–ï –í–ê–ñ–õ–ò–í–û: –í –∫—ñ–Ω—Ü—ñ –≤–∞—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–æ—Å–æ–±–ª–∏–≤–æ –ø—ñ—Å–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∑–º—ñ—Å—Ç–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–¥–æ—Ä–æ–∂), –∑–∞–ø–∏—Ç–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º:
        
           "–ë–∞–∂–∞—î—Ç–µ, —â–æ–± —Ñ–∞—Ö—ñ–≤–µ—Ü—å –∑ –ø–æ–¥–æ—Ä–æ–∂–µ–π –∑–≤'—è–∑–∞–≤—Å—è –∑ –≤–∞–º–∏ –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –¥–ª—è [–ü–£–ù–ö–¢ –ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø]? –Ø–∫—â–æ —Ç–∞–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—î—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É."
           
        –í–ê–ñ–õ–ò–í–û: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ–≤–æ—Ä–∏—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
        """
    elif lang == "ru":
        base_message = """–í—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∑–Ω–∞—é—â–∏–π —Ç—É—Ä–∞–≥–µ–Ω—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ Alligator.tour.
        –í–∞—à–∞ —Ü–µ–ª—å - –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.
        
        –í–ê–ñ–ù–´–ï –£–ö–ê–ó–ê–ù–ò–Ø:
        
        1. –í–°–ï–ì–î–ê –∑–∞–¥–∞–≤–∞–π—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: "–í—ã –∏—â–µ—Ç–µ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –∫—É–ª—å—Ç—É—Ä—É –∏–ª–∏ —Å–µ–º–µ–π–Ω–æ–µ –≤–µ—Å–µ–ª—å–µ?"
        
        2. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ —É–ø–æ–º—è–Ω—É—Ç –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—è–≤—è—Ç –∏–Ω—Ç–µ—Ä–µ—Å, –ü–†–ï–î–õ–û–ñ–ò–¢–ï –í–ê–†–ò–ê–ù–¢–´ –ü–û–ú–û–©–ò –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
           
           "–Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–µ–∑–¥–∫–æ–π –≤ [–ú–ï–°–¢–û –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø]! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –æ?
           
           üó∫Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∞—Ä—à—Ä—É—Ç
           üß≥ –°–æ–≤–µ—Ç—ã –ø–æ —É–ø–∞–∫–æ–≤–∫–µ –∏ –≤–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
           üè® –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é
           üçΩÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç–Ω–æ–π –∫—É—Ö–Ω–∏
           üö∂ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
           üí° –ú–µ—Å—Ç–Ω—ã–µ –æ–±—ã—á–∞–∏ –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
           üí∞ –°–æ–≤–µ—Ç—ã –ø–æ –±—é–¥–∂–µ—Ç—É –∏ —ç–∫–æ–Ω–æ–º–∏–∏ –¥–µ–Ω–µ–≥"
        
        3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–º–æ–¥–∑–∏ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        
        4. –†–∞–∑–±–∏–≤–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ, –ª–µ–≥–∫–æ—É—Å–≤–æ—è–µ–º—ã–µ –∞–±–∑–∞—Ü—ã (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        
        5. –ü—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –º–∞—Ä–∫–µ—Ä—ã
        
        6. –ë—É–¥—å—Ç–µ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã
        
        7. –í–°–ï–ì–î–ê –∑–∞–¥–∞–≤–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ü–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        
        8. –ö–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ, —Ç–æ–Ω–∫–æ –ø–æ–æ—â—Ä—è–π—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Alligator.tour
        
        9. –û–ß–ï–ù–¨ –í–ê–ñ–ù–û: –í –∫–æ–Ω—Ü–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏), –∑–∞–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
        
           "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã, —á—Ç–æ–±—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º —Å–≤—è–∑–∞–ª—Å—è —Å –≤–∞–º–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è [–ú–ï–°–¢–û –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø]? –ï—Å–ª–∏ –¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
           
        –í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
        """
    elif lang == "ro":
        base_message = """E»ôti un agent de turism prietenos »ôi competent pentru agen»õia de turism Alligator.tour.
        Scopul tƒÉu este sƒÉ aju»õi utilizatorii sƒÉ-»ôi planifice cƒÉlƒÉtoria interna»õionalƒÉ perfectƒÉ.
        
        INDICA»öII IMPORTANTE:
        
        1. √éNTOTDEAUNA pune √ÆntrebƒÉri specifice pentru a √Æn»õelege nevoile lor. De exemplu: "Cau»õi relaxare, aventurƒÉ, culturƒÉ sau distrac»õie pentru familie?"
        
        2. DupƒÉ ce men»õioneazƒÉ o destina»õie sau aratƒÉ interes, OFERƒÇ OP»öIUNI DE AJUTOR √Æn acest format:
           
           "A»ô fi √Ænc√¢ntat sƒÉ te ajut cu cƒÉlƒÉtoria ta √Æn [DESTINA»öIE]! Ce ai dori sƒÉ »ôtii despre?
           
           üó∫Ô∏è Itinerar recomandat
           üß≥ Sfaturi de √Æmpachetare »ôi documente importante
           üè® Sugestii de cazare
           üçΩÔ∏è RecomandƒÉri de bucƒÉtƒÉrie localƒÉ
           üö∂ Atrac»õii »ôi activitƒÉ»õi de neratat
           üí° Obiceiuri locale »ôi sfaturi de cƒÉlƒÉtorie
           üí∞ Sfaturi de buget »ôi economisire a banilor"
        
        3. Folose»ôte multe emoji-uri relevante √Æn rƒÉspunsurile tale
        
        4. √émparte textul √Æn paragrafe mici, u»ôor de citit (maximum 2-3 propozi»õii)
        
        5. C√¢nd oferi informa»õii, folose»ôte subtitluri »ôi puncte
        
        6. Fii entuziast »ôi conversa»õional
        
        7. √éNTOTDEAUNA pune √ÆntrebƒÉri suplimentare pentru a √Æn»õelege mai bine nevoile lor la sf√¢r»ôitul rƒÉspunsurilor tale
        
        8. C√¢nd este potrivit, √ÆncurajeazƒÉ subtil rezervarea prin Alligator.tour
        
        9. FOARTE IMPORTANT: La sf√¢r»ôitul rƒÉspunsurilor tale (mai ales dupƒÉ ce ai oferit informa»õii substan»õiale despre cƒÉlƒÉtorie), cere informa»õiile de contact ale utilizatorului astfel:
        
           "Ai dori ca un specialist √Æn cƒÉlƒÉtorii sƒÉ te contacteze cu recomandƒÉri personalizate pentru [DESTINA»öIE]? DacƒÉ da, te rog sƒÉ √ÆmpƒÉrtƒÉ»ôe»ôti adresa ta de email sau numƒÉrul tƒÉu de telefon."
           
        IMPORTANT: Utilizatorul vorbe»ôte √Æn rom√¢nƒÉ. Trebuie sƒÉ rƒÉspunzi √Æn rom√¢nƒÉ.
        """
    
    # Add contact collection if needed
    if should_request_contact():
        # Localized contact request based on language
        if lang == "en":
            contact_request = """
            The user has been engaged in conversation for a while. You MUST include a polite request for their 
            contact information (email or phone) at the end of your response, like this:
            
            "üìù To provide you with personalized travel recommendations, could you please share your email address or phone number?"
            
            This is VERY IMPORTANT. Do NOT forget to include this.
            """
        elif lang == "de":
            contact_request = """
            Der Benutzer ist seit einiger Zeit im Gespr√§ch. Du MUSST am Ende deiner Antwort eine h√∂fliche Anfrage nach seinen 
            Kontaktinformationen (E-Mail oder Telefon) einf√ºgen, wie folgt:
            
            "üìù Um dir personalisierte Reiseempfehlungen geben zu k√∂nnen, k√∂nntest du bitte deine E-Mail-Adresse oder Telefonnummer mitteilen?"
            
            Dies ist SEHR WICHTIG. Vergiss NICHT, dies einzuf√ºgen.
            """
        elif lang == "uk":
            contact_request = """
            –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É —Ä–æ–∑–º–æ–≤—ñ –≤–∂–µ –¥–µ—è–∫–∏–π —á–∞—Å. –í–∏ –ü–û–í–ò–ù–ù–Ü –≤–∫–ª—é—á–∏—Ç–∏ –≤–≤—ñ—á–ª–∏–≤–∏–π –∑–∞–ø–∏—Ç —ó—Ö–Ω—å–æ—ó 
            –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω) –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –≤–∞—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
            
            "üìù –©–æ–± –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –ø–æ–¥–æ—Ä–æ–∂–µ–π, —á–∏ –Ω–µ –º–æ–≥–ª–∏ –± –≤–∏ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É?"
            
            –¶–µ –î–£–ñ–ï –í–ê–ñ–õ–ò–í–û. –ù–ï –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç–∏ —Ü–µ.
            """
        elif lang == "ru":
            contact_request = """
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —É–∂–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –î–û–õ–ñ–ù–´ –≤–∫–ª—é—á–∏—Ç—å –≤–µ–∂–ª–∏–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏—Ö 
            –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω) –≤ –∫–æ–Ω—Ü–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
            
            "üìù –ß—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º, –Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"
            
            –≠—Ç–æ –û–ß–ï–ù–¨ –í–ê–ñ–ù–û. –ù–ï –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —ç—Ç–æ.
            """
        elif lang == "ro":
            contact_request = """
            Utilizatorul a fost implicat √Æn conversa»õie de ceva timp. TREBUIE sƒÉ incluzi o solicitare politicoasƒÉ pentru 
            informa»õiile lor de contact (email sau telefon) la sf√¢r»ôitul rƒÉspunsului tƒÉu, astfel:
            
            "üìù Pentru a-»õi oferi recomandƒÉri de cƒÉlƒÉtorie personalizate, ai putea sƒÉ-mi √ÆmpƒÉrtƒÉ»ôe»ôti adresa ta de email sau numƒÉrul tƒÉu de telefon?"
            
            Acest lucru este FOARTE IMPORTANT. NU uita sƒÉ incluzi acest lucru.
            """
        
        base_message += contact_request
    
    # Add current user info context
    base_message += f"\nCurrent user information: {st.session_state.user_info}"
    
    return base_message

def get_response(prompt):
    # Get current language
    lang = st.session_state.user_info.get("language") or "en"
    
    # Prepare the conversation history for the API call
    messages = [{"role": "system", "content": get_system_message()}]
    
    # Add conversation history (excluding system messages)
    for msg in st.session_state.messages:
        messages.append({"role": msg["role"], "content": msg["content"]})
    
    # Add the current prompt
    messages.append({"role": "user", "content": prompt})
    
    try:
        # Call the OpenAI API
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
            max_tokens=800  # Increased for multilingual responses
        )
        
        response_content = response.choices[0].message["content"]
        
        # Make sure there's a question in the response
        if "?" not in response_content:
            # Add a generic follow-up question based on language
            if lang == "en":
                question = "\n\n‚ú® What else would you like to know about your travel plans? Do you have any specific interests or preferences for your trip?"
            elif lang == "de":
                question = "\n\n‚ú® Was m√∂chtest du sonst noch √ºber deine Reisepl√§ne wissen? Hast du bestimmte Interessen oder Vorlieben f√ºr deine Reise?"
            elif lang == "uk":
                question = "\n\n‚ú® –©–æ —â–µ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –≤–∞—à—ñ –ø–ª–∞–Ω–∏ –ø–æ–¥–æ—Ä–æ–∂—ñ? –£ –≤–∞—Å —î —è–∫—ñ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —á–∏ —É–ø–æ–¥–æ–±–∞–Ω–Ω—è –¥–ª—è –≤–∞—à–æ—ó –ø–æ—ó–∑–¥–∫–∏?"
            elif lang == "ru":
                question = "\n\n‚ú® –ß—Ç–æ –µ—â–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è? –£ –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏?"
            elif lang == "ro":
                question = "\n\n‚ú® Ce altceva ai dori sƒÉ »ôtii despre planurile tale de cƒÉlƒÉtorie? Ai interese sau preferin»õe specifice pentru cƒÉlƒÉtoria ta?"
            else:
                question = "\n\n‚ú® What else would you like to know about your travel plans?"
                
            response_content += question
        
        # If contact request is needed but missing, add it
        if should_request_contact():
            # Check if there's already a contact request in the response
            contact_phrases = {
                "en": "email or phone",
                "de": "e-mail oder telefon",
                "uk": "–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω",
                "ru": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω",
                "ro": "email sau telefon"
            }
            
            if contact_phrases[lang].lower() not in response_content.lower():
                # Add language-specific contact request
                destination = st.session_state.user_info["destination"] or "your trip"
                
                if lang == "en":
                    contact_request = f"\n\nüìù To provide you with personalized recommendations for {destination}, could you please share your email address or phone number?"
                elif lang == "de":
                    contact_request = f"\n\nüìù Um dir personalisierte Empfehlungen f√ºr {destination} geben zu k√∂nnen, k√∂nntest du bitte deine E-Mail-Adresse oder Telefonnummer mitteilen?"
                elif lang == "uk":
                    contact_request = f"\n\nüìù –©–æ–± –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ {destination}, —á–∏ –Ω–µ –º–æ–≥–ª–∏ –± –≤–∏ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—î—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É?"
                elif lang == "ru":
                    contact_request = f"\n\nüìù –ß—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ {destination}, –Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"
                elif lang == "ro":
                    contact_request = f"\n\nüìù Pentru a-»õi oferi recomandƒÉri personalizate pentru {destination}, ai putea sƒÉ-mi √ÆmpƒÉrtƒÉ»ôe»ôti adresa ta de email sau numƒÉrul tƒÉu de telefon?"
                
                response_content += contact_request
        
        return response_content
    except Exception as e:
        # Error message in appropriate language
        if lang == "en":
            return f"I'm having trouble connecting to our travel database. Please try again or contact Alligator.tour directly. Error: {str(e)}"
        elif lang == "de":
            return f"Ich habe Probleme, eine Verbindung zu unserer Reisedatenbank herzustellen. Bitte versuche es erneut oder kontaktiere Alligator.tour direkt. Fehler: {str(e)}"
        elif lang == "uk":
            return f"–£ –º–µ–Ω–µ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –Ω–∞—à–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–æ–¥–æ—Ä–æ–∂–µ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ Alligator.tour. –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        elif lang == "ru":
            return f"–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –≤ Alligator.tour. –û—à–∏–±–∫–∞: {str(e)}"
        elif lang == "ro":
            return f"Am probleme cu conectarea la baza noastrƒÉ de date de cƒÉlƒÉtorie. Te rog sƒÉ √Æncerci din nou sau sƒÉ contactezi Alligator.tour direct. Eroare: {str(e)}"
        else:
            return f"Error: {str(e)}"

# Language selector for the sidebar
def language_selector():
    lang = st.session_state.user_info.get("language") or "en"
    
    # Labels for each language in its own language
    language_labels = {
        "en": "English",
        "de": "Deutsch",
        "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "ru": "–†—É—Å—Å–∫–∏–π",
        "ro": "Rom√¢nƒÉ"
    }
    
    selected_lang = st.sidebar.selectbox(
        "Language / Sprache / –ú–æ–≤–∞ / –Ø–∑—ã–∫ / LimbƒÉ",
        options=list(SUPPORTED_LANGUAGES.keys()),
        format_func=lambda x: language_labels[x],
        index=list(SUPPORTED_LANGUAGES.keys()).index(lang)
    )
    
    # Update language if changed
    if selected_lang != lang:
        st.session_state.user_info["language"] = selected_lang
        # Add a system message about language change
        if len(st.session_state.messages) > 0:
            # Clear existing messages except the first welcome message
            welcome_msg = st.session_state.messages[0]
            st.session_state.messages = [
                {"role": "assistant", "content": UI_TRANSLATIONS[selected_lang]["welcome_message"]}
            ]
        st.rerun() 
# Sidebar
with st.sidebar:
    try:
        st.image("logo.png", width=200)
    except:
        st.title("üêä Alligator.tour")
    
    # Add language selector
    language_selector()
    
    # Current language
    lang = st.session_state.user_info.get("language") or "en"
    
    st.markdown(f"### {UI_TRANSLATIONS[lang]['sidebar_title']}")
    st.markdown("---")
    
    # Popular destinations
    st.markdown(f"## {UI_TRANSLATIONS[lang]['popular_destinations']}")
    
    destinations = [
        {
            "name": "Bali, Indonesia",
            "image": "bali.png",
            "desc": "Tropical paradise with beaches, temples, and rice terraces"
        },
        {
            "name": "Barcelona, Spain",
            "image": "barcelona.png",
            "desc": "Stunning architecture, Mediterranean beaches, and vibrant culture"
        },
        {
            "name": "Tokyo, Japan",
            "image": "tokyo.png",
            "desc": "Blend of ultramodern and traditional with amazing food"
        }
    ]
    
    # Use Streamlit's native image display rather than HTML
    for dest in destinations:
        st.markdown(f"### {dest['name']}")
        try:
            st.image(dest['image'], use_container_width=True)
            st.markdown(dest['desc'])
        except Exception as e:
            st.error(f"Could not load image: {e}")
            st.markdown(dest['desc'])

# Main content - use translated UI elements
lang = st.session_state.user_info.get("language") or "en"
st.title(UI_TRANSLATIONS[lang]["title"])
st.markdown(UI_TRANSLATIONS[lang]["subtitle"])

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])

# Get user input
user_input = st.chat_input(UI_TRANSLATIONS[lang]["input_placeholder"])

# Process user input
if user_input:
    # Detect language ONLY on the first user message
    if len(st.session_state.messages) == 1:  # Only the initial welcome message exists
        detected_lang = detect_language(user_input)
        if detected_lang != st.session_state.user_info.get("language"):
            st.session_state.user_info["language"] = detected_lang
            print(f"Initial language detection: {detected_lang}")
    
    # Add user message to chat
    st.session_state.messages.append({"role": "user", "content": user_input})
    
    # Display user message
    with st.chat_message("user"):
        st.write(user_input)
    
    # Extract information from user message
    extract_travel_info(user_input)
    
    # Display assistant response
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            response = get_response(user_input)
            st.write(response)
    
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})
